defmodule NimlerWrapper do
  @on_load :init
  def init(), do: :erlang.load_nif(to_charlist(Path.join(Path.dirname(__ENV__.file), 'nif')), 0)

  def enif_compare(_, _), do: exit(:nif_library_not_loaded)
  def enif_term_type(_, _, _, _, _, _), do: exit(:nif_library_not_loaded)
  def enif_system_info(), do: exit(:nif_library_not_loaded)
  def enif_snprintf(_), do: exit(:nif_library_not_loaded)
  def enif_raise_exception(_), do: exit(:nif_library_not_loaded)
  def enif_is_atom(_), do: exit(:nif_library_not_loaded)
  def enif_is_binary(_), do: exit(:nif_library_not_loaded)
  def enif_is_current_process_alive(), do: exit(:nif_library_not_loaded)
  def enif_is_empty_list(_), do: exit(:nif_library_not_loaded)
  def enif_is_exception(_), do: exit(:nif_library_not_loaded)
  def enif_is_fun(_), do: exit(:nif_library_not_loaded)
  def enif_is_identical(_, _), do: exit(:nif_library_not_loaded)
  def enif_is_list(_), do: exit(:nif_library_not_loaded)
  def enif_is_map(_), do: exit(:nif_library_not_loaded)
  def enif_is_number(_), do: exit(:nif_library_not_loaded)
  def enif_is_pid(_), do: exit(:nif_library_not_loaded)
  def enif_is_pid_undefined(_), do: exit(:nif_library_not_loaded)
  def enif_is_process_alive(_), do: exit(:nif_library_not_loaded)
  def enif_is_ref(_), do: exit(:nif_library_not_loaded)
  def enif_is_tuple(_), do: exit(:nif_library_not_loaded)
  def enif_get_atom(_), do: exit(:nif_library_not_loaded)
  def enif_get_atom_length(_), do: exit(:nif_library_not_loaded)
  def enif_get_string(_), do: exit(:nif_library_not_loaded)
  def enif_get_int(_), do: exit(:nif_library_not_loaded)
  def enif_get_long(_), do: exit(:nif_library_not_loaded)
  def enif_get_int64(_), do: exit(:nif_library_not_loaded)
  def enif_get_uint(_), do: exit(:nif_library_not_loaded)
  def enif_get_ulong(_), do: exit(:nif_library_not_loaded)
  def enif_get_uint64(_), do: exit(:nif_library_not_loaded)
  def enif_get_double(_), do: exit(:nif_library_not_loaded)
  def enif_get_tuple(_), do: exit(:nif_library_not_loaded)
  def enif_get_list_length(_), do: exit(:nif_library_not_loaded)
  def enif_get_list_cell(_), do: exit(:nif_library_not_loaded)
  def enif_get_map_size(_), do: exit(:nif_library_not_loaded)
  def enif_get_map_value(_, _), do: exit(:nif_library_not_loaded)
  def enif_get_local_pid(_), do: exit(:nif_library_not_loaded)
  def enif_make_map_put(_, _, _), do: exit(:nif_library_not_loaded)
  def enif_make_map_remove(_, _), do: exit(:nif_library_not_loaded)
  def enif_make_map_update(_, _, _), do: exit(:nif_library_not_loaded)
  def enif_make_string(), do: exit(:nif_library_not_loaded)
  def enif_make_string_len(), do: exit(:nif_library_not_loaded)
  def enif_make_list(), do: exit(:nif_library_not_loaded)
  def enif_make_list_cell(), do: exit(:nif_library_not_loaded)
  def enif_make_list_from_array(), do: exit(:nif_library_not_loaded)
  def enif_make_reverse_list(), do: exit(:nif_library_not_loaded)
  def enif_make_tuple(), do: exit(:nif_library_not_loaded)
  def enif_make_tuple_from_array(), do: exit(:nif_library_not_loaded)
  def enif_make_int(), do: exit(:nif_library_not_loaded)
  def enif_make_long(), do: exit(:nif_library_not_loaded)
  def enif_make_int64(), do: exit(:nif_library_not_loaded)
  def enif_make_uint(), do: exit(:nif_library_not_loaded)
  def enif_make_ulong(), do: exit(:nif_library_not_loaded)
  def enif_make_uint64(), do: exit(:nif_library_not_loaded)
  def enif_make_double(), do: exit(:nif_library_not_loaded)
  def enif_make_new_binary(), do: exit(:nif_library_not_loaded)
  def enif_make_new_map(), do: exit(:nif_library_not_loaded)
  def enif_make_map_from_arrays(), do: exit(:nif_library_not_loaded)
  def enif_make_atom(), do: exit(:nif_library_not_loaded)
  def enif_make_existing_atom(), do: exit(:nif_library_not_loaded)
  def enif_make_existing_atom_len(), do: exit(:nif_library_not_loaded)
  def enif_make_copy(), do: exit(:nif_library_not_loaded)
  def enif_make_pid(), do: exit(:nif_library_not_loaded)
  def enif_make_ref(), do: exit(:nif_library_not_loaded)
  def enif_make_unique_integer(), do: exit(:nif_library_not_loaded)
end
